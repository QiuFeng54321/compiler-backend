space_id      = @{ ("%" | "@") ~ ASCII_ALPHANUMERIC+ }
block_id      = @{ "#" ~ ASCII_ALPHANUMERIC+ }
int_dec_const = @{ ASCII_DIGIT+ }
int_bin_const = @{ "b" ~ ASCII_BIN_DIGIT+ }
int_hex_const = @{ "h" ~ ASCII_HEX_DIGIT+ }
int_const     = @{ int_dec_const | int_bin_const | int_hex_const }
bool          = @{ "true" | "false" }
void          = @{ "void" }
const_list = {"[" ~ (literal ~ ("," ~ literal)*)? ~ "]"}
list = {"[" ~ (value ~ ("," ~ value)*)? ~ "]"}
const_struct = {"{" ~ (literal ~ ("," ~ literal)*)? ~ "}"}
struct = {"{" ~ (value ~ ("," ~ value)*)? ~ "}"}

space = { space_id ~ ("." ~ int_const)* | void | list | struct }

literal = {int_const | bool | void | const_list | const_struct}

value = { literal | space }

type = {
    "[" ~ type ~ "," ~ int_const ~ "]"
  | "{" ~ type ~ ("," ~ type)* ~ "}"
  | ("u" | "i") ~ ("16" | "32" | "64")
  | "bool"
  | "void"
}

instruction = {
    space ~ "=" ~ expr
  | special_proc
  | space ~ ("->" | "<-") ~ space
}
terminator  = {
    "=>" ~ (space ~ "?" ~ block_id ~ ":" ~ block_id | "ret" ~ value? | block_id | "next")
}
expr        =  { binary_op | unary_op | special_fn }

binary_op      =  { value ~ ("+" | "-" | "*" | "/") ~ value }
unary_op       =  { ("-" | "!") ~ value | value }
special_fn     =  {
    "alloc" ~ type
  | "call" ~ space_id
}
special_proc   =  {
    "param" ~ value
    | "nop"
}

block         = { block_id ~ "{" ~ instruction* ~ terminator ~ "}" }

fn_param        =  { type ~ space_id }
fn_body_block   = { "{" ~ block* ~ "}" }
fn_marker         =  {
    "ext"
  | "decl"
}
fn              =  { fn_marker? ~ "fn" ~ space_id ~ ":" ~ (fn_param ~ ("," ~ fn_param)*)? ~ "->" ~ type ~ fn_body_block? }
fn_impl = {"impl" ~ space_id ~ fn_body_block}
const_decl = {"const" ~ space_id ~ "=" ~ literal}
// global_decl = {"global" ~ space_id ~ "=" ~ }
top_level_stmt = {fn | fn_impl | const_decl}

program = { top_level_stmt+ }

WHITESPACE = _{ " " | "\t" | NEWLINE }
